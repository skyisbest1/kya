{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Colaboratory에 오신 것을 환영합니다",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/skyisbest1/kya/blob/master/Colaboratory%EC%97%90_%EC%98%A4%EC%8B%A0_%EA%B2%83%EC%9D%84_%ED%99%98%EC%98%81%ED%95%A9%EB%8B%88%EB%8B%A4.ipynb2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "5fCEDCU_qrC0"
      },
      "source": [
        "<p><img alt=\"Colaboratory logo\" height=\"45px\" src=\"/img/colab_favicon.ico\" align=\"left\" hspace=\"10px\" vspace=\"0px\"></p>\n",
        "\n",
        "<h1>Colaboratory에 오신 것을 환영합니다</h1>\n",
        "\n",
        "\n",
        "Colaboratory는 설치가 필요 없으며 완전히 클라우드에서 실행되는 무료 Jupyter 노트 환경입니다.\n",
        "\n",
        "Colaboratory를 사용하면 브라우저를 통해 무료로 코드를 작성 및 실행하고, 분석을 저장 및 공유하며, 강력한 컴퓨팅 리소스를 이용할 수 있습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "xitplqMNk_Hc",
        "outputId": "ed4f60d2-878d-4056-c438-352dac39a112",
        "colab": {
          "height": 420
        }
      },
      "source": [
        "#@title Colaboratory 소개 { display-mode: \"form\" }\n",
        "#@markdown 3분 길이의 동영상을 통해 Colaboratory의 주요 기능을 간단하게 알아보세요.\n",
        "from IPython.display import YouTubeVideo\n",
        "YouTubeVideo('inN8seMm7UI', width=600, height=400)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"600\"\n",
              "            height=\"400\"\n",
              "            src=\"https://www.youtube.com/embed/inN8seMm7UI\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.YouTubeVideo at 0x7f956e9dda50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 0
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "GJBs_flRovLc"
      },
      "source": [
        "## 시작하기\n",
        "\n",
        "지금 읽고 계신 문서는 Colaboratory에 호스팅된 <a href=\"https://jupyter.org/\">Jupyter 노트</a>입니다. 정적인 페이지가 아닌, Python 등의 언어로 코드를 작성하고 실행할 수 있는 대화형 환경입니다.\n",
        "\n",
        "예를 들어 다음은 값을 계산하여 변수로 저장하고 결과를 출력하는 간단한 Python 스크립트가 포함된 <strong>코드 셀</strong>입니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "gJr_9dXGpJ05",
        "outputId": "5626194c-e802-4293-942d-2908885c3c1f",
        "colab": {
          "height": 35
        }
      },
      "source": [
        "seconds_in_a_day = 24 * 60 * 60\n",
        "seconds_in_a_day"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "86400"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 0
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "2fhs6GZ4qFMx"
      },
      "source": [
        "위 셀의 코드를 실행하려면 셀을 클릭하여 선택한 후, 코드 왼쪽의 실행 버튼을 누르거나 단축키 'Command/Ctrl+Enter'를 사용합니다.\n",
        "\n",
        "모든 셀은 동일한 전역 상태를 수정하므로 셀을 실행하여 정의되는 변수는 다른 셀에서도 사용할 수 있습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-gE-Ez1qtyIA",
        "outputId": "8d2e4259-4682-4e19-b683-7b9087f28820",
        "colab": {
          "height": 35
        }
      },
      "source": [
        "seconds_in_a_week = 7 * seconds_in_a_day\n",
        "seconds_in_a_week"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "604800"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 0
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "lSrWNr3MuFUS"
      },
      "source": [
        "Colaboratory 노트 사용 방법을 자세히 알아보려면 <a href=\"/notebooks/basic_features_overview.ipynb\">Colaboratory 개요</a>를 참조하세요.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "-Rh3-Vt9Nev9"
      },
      "source": [
        "## 추가 리소스\n",
        "\n",
        "다음 리소스를 통해 Python, Jupyter, Colaboratory 및 관련 도구를 최대한 활용하는 방법을 알아보세요.\n",
        "\n",
        "### Colaboratory에서 노트로 작업하기\n",
        "- [Colaboratory 개요](/notebooks/basic_features_overview.ipynb)\n",
        "- [Markdown 가이드](/notebooks/markdown_guide.ipynb)\n",
        "- [라이브러리 가져오기 및 종속 항목 설치하기](/notebooks/snippets/importing_libraries.ipynb)\n",
        "- [GitHub에서 노트 저장 및 로드하기](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n",
        "- [대화형 양식](/notebooks/forms.ipynb)\n",
        "- [대화형 위젯](/notebooks/widgets.ipynb)\n",
        "- <img src=\"/img/new.png\" height=\"20px\" align=\"left\" hspace=\"4px\" alt=\"New\"></img>\n",
        " [Colab의 TensorFlow 2](/notebooks/tensorflow_version.ipynb)\n",
        "\n",
        "### 데이터로 작업하기\n",
        "- [데이터 로드: 드라이브, 스프레드시트, Google Cloud Storage](/notebooks/io.ipynb) \n",
        "- [차트: 데이터 시각화하기](/notebooks/charts.ipynb)\n",
        "- [BigQuery 시작하기](/notebooks/bigquery.ipynb)\n",
        "\n",
        "### 머신러닝 단기집중과정\n",
        "다음은 Google 온라인 머신러닝 과정에서 가져온 일부 노트입니다. <a href=\"https://developers.google.com/machine-learning/crash-course/\">전체 과정 웹사이트</a>에서 자세한 내용을 확인하세요.\n",
        "- [Pandas 소개](/notebooks/mlcc/intro_to_pandas.ipynb)\n",
        "- [TensorFlow 개념](/notebooks/mlcc/tensorflow_programming_concepts.ipynb)\n",
        "- [TensorFlow 첫걸음](/notebooks/mlcc/first_steps_with_tensor_flow.ipynb)\n",
        "- [신경망 소개](/notebooks/mlcc/intro_to_neural_nets.ipynb)\n",
        "- [희소 데이터 및 임베딩 소개](/notebooks/mlcc/intro_to_sparse_data_and_embeddings.ipynb)\n",
        "\n",
        "### 가속 하드웨어 사용하기\n",
        "- [GPU를 사용한 TensorFlow](/notebooks/gpu.ipynb)\n",
        "- [TPU를 사용한 TensorFlow](/notebooks/tpu.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "P-H6Lw1vyNNd"
      },
      "source": [
        "## 머신러닝 예제: Seedbank\n",
        "\n",
        "Colaboratory 덕분에 가능해진 대화형 머신러닝 분석의 예시를 자세히 살펴보려면 <a href=\"https://research.google.com/seedbank/\">Seedbank</a> 프로젝트를 확인하세요.\n",
        "\n",
        "일부 추천 예시는 다음과 같습니다.\n",
        "\n",
        "- <a href=\"https://research.google.com/seedbank/seed/neural_style_transfer_with_tfkeras\">신경망 스타일 이전</a>: 딥 러닝을 사용하여 이미지 간에 스타일을 이전합니다.\n",
        "- <a href=\"https://research.google.com/seedbank/seed/ez_nsynth\">EZ NSynth</a>: WaveNet 자동 인코더로 오디오를 합성합니다.\n",
        "- <a href=\"https://research.google.com/seedbank/seed/fashion_mnist_with_keras_and_tpus\">Keras 및 TPU를 사용한 Fashion MNIST</a>: 딥 러닝으로 패션 관련 이미지를 분류합니다.\n",
        "- <a href=\"https://research.google.com/seedbank/seed/deepdream\">DeepDream</a>: 내 사진으로 DeepDream 이미지를 만듭니다.\n",
        "- <a href=\"https://research.google.com/seedbank/seed/convolutional_vae\">컨볼루션 VAE</a>: 손으로 쓴 숫자의 생성 모델을 만듭니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MIxxK2vOt0d0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "58c2de22-21b9-4ca6-89d1-d0c59da7a056"
      },
      "source": [
        "import getpass\n",
        "APIKEY = getpass.getpass()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "··········\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3F8EZtJEuCN0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "outputId": "48109b53-f225-4de0-b994-3cff71a34e0e"
      },
      "source": [
        "!pip install --upgrade pip\n",
        "!pip install --upgrade google-api-python-client"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already up-to-date: pip in /usr/local/lib/python3.6/dist-packages (19.3.1)\n",
            "Requirement already up-to-date: google-api-python-client in /usr/local/lib/python3.6/dist-packages (1.7.11)\n",
            "Requirement already satisfied, skipping upgrade: six<2dev,>=1.6.1 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client) (1.12.0)\n",
            "Requirement already satisfied, skipping upgrade: google-auth>=1.4.1 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client) (1.4.2)\n",
            "Requirement already satisfied, skipping upgrade: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client) (0.11.3)\n",
            "Requirement already satisfied, skipping upgrade: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client) (0.0.3)\n",
            "Requirement already satisfied, skipping upgrade: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client) (3.0.0)\n",
            "Requirement already satisfied, skipping upgrade: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.4.1->google-api-python-client) (4.0)\n",
            "Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.4.1->google-api-python-client) (0.2.7)\n",
            "Requirement already satisfied, skipping upgrade: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.4.1->google-api-python-client) (3.1.1)\n",
            "Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa>=3.1.4->google-auth>=1.4.1->google-api-python-client) (0.4.7)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J1nMaRmFuaAz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "outputId": "d2b366c6-534c-4902-d7f9-b6bdbcd014f2"
      },
      "source": [
        "!wget \"https://upload.wikimedia.org/wikipedia/commons/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg\" -O cat.jpg"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-11-15 01:43:16--  https://upload.wikimedia.org/wikipedia/commons/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg\n",
            "Resolving upload.wikimedia.org (upload.wikimedia.org)... 208.80.154.240, 2620:0:861:ed1a::2:b\n",
            "Connecting to upload.wikimedia.org (upload.wikimedia.org)|208.80.154.240|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 789779 (771K) [image/jpeg]\n",
            "Saving to: ‘cat.jpg’\n",
            "\n",
            "\rcat.jpg               0%[                    ]       0  --.-KB/s               \rcat.jpg             100%[===================>] 771.27K  4.20MB/s    in 0.2s    \n",
            "\n",
            "2019-11-15 01:43:17 (4.20 MB/s) - ‘cat.jpg’ saved [789779/789779]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ItzOkkVuo8M",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bZ8EBAdYuxMO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from googleapiclient.discovery import build\n",
        "gcs_service = build('storage', 'v1')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cTeDBXATxw3l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "019c0afd-abd0-4d64-bcd2-d03297f3e87f"
      },
      "source": [
        "!pip install google-cloud-vision\n",
        "!pip install google-cloud\n",
        "!pip install google-cloud-videointelligence\n",
        "!gcloud init"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting google-cloud-vision\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/57/fd/c2ea7adfecf62a3020088ea6693ff5b3785245d0ee5a9bd032f983c79610/google_cloud_vision-0.40.0-py2.py3-none-any.whl (431kB)\n",
            "\r\u001b[K     |▊                               | 10kB 16.0MB/s eta 0:00:01\r\u001b[K     |█▌                              | 20kB 2.1MB/s eta 0:00:01\r\u001b[K     |██▎                             | 30kB 3.1MB/s eta 0:00:01\r\u001b[K     |███                             | 40kB 2.1MB/s eta 0:00:01\r\u001b[K     |███▉                            | 51kB 2.5MB/s eta 0:00:01\r\u001b[K     |████▋                           | 61kB 3.0MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 71kB 3.5MB/s eta 0:00:01\r\u001b[K     |██████                          | 81kB 3.9MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 92kB 4.4MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 102kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████▍                       | 112kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 122kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 133kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 143kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 153kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 163kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 174kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 184kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 194kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 204kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████                | 215kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 225kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 235kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 245kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 256kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 266kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 276kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 286kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 296kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 307kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████▌        | 317kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 327kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 337kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 348kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 358kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 368kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 378kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 389kB 3.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 399kB 3.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 409kB 3.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 419kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 430kB 3.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 440kB 3.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: google-api-core[grpc]<2.0.0dev,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-vision) (1.14.3)\n",
            "Requirement already satisfied: google-auth<2.0dev,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.4.2)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.12.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.6.0)\n",
            "Requirement already satisfied: protobuf>=3.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.10.0)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2018.9)\n",
            "Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2.21.0)\n",
            "Requirement already satisfied: setuptools>=34.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (41.4.0)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.8.2; extra == \"grpc\" in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.15.0)\n",
            "Requirement already satisfied: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.1.1)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (4.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (0.2.7)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.24.3)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2.8)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2019.9.11)\n",
            "Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa>=3.1.4->google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (0.4.7)\n",
            "Installing collected packages: google-cloud-vision\n",
            "Successfully installed google-cloud-vision-0.40.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "google"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Collecting google-cloud\n",
            "  Downloading https://files.pythonhosted.org/packages/ba/b1/7c54d1950e7808df06642274e677dbcedba57f75307adf2e5ad8d39e5e0e/google_cloud-0.34.0-py2.py3-none-any.whl\n",
            "Installing collected packages: google-cloud\n",
            "Successfully installed google-cloud-0.34.0\n",
            "Collecting google-cloud-videointelligence\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7c/57/4ed201f69917b9b6abf3a9919867cc492242bc4447f354dd653c395af661/google_cloud_videointelligence-1.12.0-py2.py3-none-any.whl (173kB)\n",
            "\u001b[K     |████████████████████████████████| 174kB 3.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: google-api-core[grpc]<2.0.0dev,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-videointelligence) (1.14.3)\n",
            "Requirement already satisfied: google-auth<2.0dev,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.4.2)\n",
            "Requirement already satisfied: setuptools>=34.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (41.4.0)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2018.9)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.12.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.6.0)\n",
            "Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2.21.0)\n",
            "Requirement already satisfied: protobuf>=3.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.10.0)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.8.2; extra == \"grpc\" in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.15.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (0.2.7)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (4.0)\n",
            "Requirement already satisfied: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.1.1)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2.8)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.0.4)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2019.9.11)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (0.4.7)\n",
            "Installing collected packages: google-cloud-videointelligence\n",
            "Successfully installed google-cloud-videointelligence-1.12.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "google"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Welcome! This command will take you through the configuration of gcloud.\n",
            "\n",
            "Settings from your current configuration [default] are:\n",
            "component_manager:\n",
            "  disable_update_check: 'True'\n",
            "core:\n",
            "  account: skyisdifferent@naver.com\n",
            "\n",
            "Pick configuration to use:\n",
            " [1] Re-initialize this configuration [default] with new settings \n",
            " [2] Create a new configuration\n",
            "Please enter your numeric choice:  1\n",
            "\n",
            "Your current configuration has been set to: [default]\n",
            "\n",
            "You can skip diagnostics next time by using the following flag:\n",
            "  gcloud init --skip-diagnostics\n",
            "\n",
            "Network diagnostic detects and fixes local network connection issues.\n",
            "Reachability Check passed.\n",
            "Network diagnostic passed (1/1 checks passed).\n",
            "\n",
            "Choose the account you would like to use to perform operations for \n",
            "this configuration:\n",
            " [1] skyisdifferent@naver.com\n",
            " [2] Log in with a new account\n",
            "Please enter your numeric choice:  1\n",
            "\n",
            "You are logged in as: [skyisdifferent@naver.com].\n",
            "\n",
            "Pick cloud project to use: \n",
            " [1] precise-antenna-259100\n",
            " [2] Create a new project\n",
            "Please enter numeric choice or text value (must exactly match list \n",
            "item):  1\n",
            "\n",
            "Your current project has been set to: [precise-antenna-259100].\n",
            "\n",
            "Not setting default zone/region (this feature makes it easier to use\n",
            "[gcloud compute] by setting an appropriate default value for the\n",
            "--zone and --region flag).\n",
            "See https://cloud.google.com/compute/docs/gcloud-compute section on how to set\n",
            "default compute region and zone manually. If you would like [gcloud init] to be\n",
            "able to do this for you the next time you run it, make sure the\n",
            "Compute Engine API is enabled for your project on the\n",
            "https://console.developers.google.com/apis page.\n",
            "\n",
            "Your Google Cloud SDK is configured and ready to use!\n",
            "\n",
            "* Commands that require authentication will use skyisdifferent@naver.com by default\n",
            "* Commands will reference project `precise-antenna-259100` by default\n",
            "Run `gcloud help config` to learn how to change individual settings\n",
            "\n",
            "This gcloud configuration is called [default]. You can create additional configurations if you work with multiple accounts and/or projects.\n",
            "Run `gcloud topic configurations` to learn more.\n",
            "\n",
            "Some things to try next:\n",
            "\n",
            "* Run `gcloud --help` to see the Cloud Platform services you can interact with. And run `gcloud help COMMAND` to get help on any gcloud command.\n",
            "* Run `gcloud topic --help` to learn about advanced features of the SDK like arg files and output formatting\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R9k3QyahvhYc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from googleapiclient.discovery import build\n",
        "gcs_service = build('storage', 'v1')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6xyR-DY8u1Xx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7ed0b2a6-fe32-4cd3-e5c2-b5d7924c081d"
      },
      "source": [
        "project_id = 'precise-antenna-259100'\n",
        "\n",
        "# Use a different globally-unique bucket name from the gsutil example above.\n",
        "import uuid\n",
        "bucket_name = 'colab-sample-bucket-' + str(uuid.uuid1())\n",
        "\n",
        "body = {\n",
        "  'name': bucket_name,\n",
        "  # For a full list of locations, see:\n",
        "  # https://cloud.google.com/storage/docs/bucket-locations\n",
        "  'location': 'us',\n",
        "}\n",
        "gcs_service.buckets().insert(project=project_id, body=body).execute()\n",
        "print('Done')"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C2_ouSs1veFO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 91
        },
        "outputId": "233f8edd-0da4-4c33-8666-a51692c51a07"
      },
      "source": [
        "import base64\n",
        "vservice = build('vision', 'v1', developerKey=APIKEY)\n",
        "request = vservice.images().annotate(body={\n",
        "        'requests': [{\n",
        "                'image': {\n",
        "                    'source': {\n",
        "                        'gcs_image_uri': \"gs://colab-sample-bucket-f57f1d0c-f477-11e9-b09d-0242ac1c0002/test.jpg\"\n",
        "                    }\n",
        "                },\n",
        "                'features': [{\n",
        "                    'type': 'TEXT_DETECTION',\n",
        "                    'maxResults': 3,\n",
        "                }]\n",
        "            }],\n",
        "        })\n",
        "responses = request.execute(num_retries=3)\n",
        "print (responses)\n",
        "\n",
        "print(responses['responses'][0]['textAnnotations'][0]['description'])"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'responses': [{'textAnnotations': [{'locale': 'ko', 'description': '행복한 하루 되세요!\\n', 'boundingPoly': {'vertices': [{'x': 37, 'y': 367}, {'x': 559, 'y': 367}, {'x': 559, 'y': 438}, {'x': 37, 'y': 438}]}}, {'description': '행복한', 'boundingPoly': {'vertices': [{'x': 38, 'y': 367}, {'x': 206, 'y': 369}, {'x': 205, 'y': 432}, {'x': 37, 'y': 430}]}}, {'description': '하루', 'boundingPoly': {'vertices': [{'x': 233, 'y': 371}, {'x': 340, 'y': 372}, {'x': 339, 'y': 429}, {'x': 232, 'y': 428}]}}, {'description': '되세요', 'boundingPoly': {'vertices': [{'x': 369, 'y': 370}, {'x': 534, 'y': 371}, {'x': 533, 'y': 438}, {'x': 368, 'y': 437}]}}, {'description': '!', 'boundingPoly': {'vertices': [{'x': 545, 'y': 377}, {'x': 559, 'y': 377}, {'x': 559, 'y': 427}, {'x': 545, 'y': 427}]}}], 'fullTextAnnotation': {'pages': [{'property': {'detectedLanguages': [{'languageCode': 'ko', 'confidence': 1}]}, 'width': 600, 'height': 600, 'blocks': [{'property': {'detectedLanguages': [{'languageCode': 'ko', 'confidence': 1}]}, 'boundingBox': {'vertices': [{'x': 38, 'y': 367}, {'x': 559, 'y': 372}, {'x': 558, 'y': 439}, {'x': 37, 'y': 434}]}, 'paragraphs': [{'property': {'detectedLanguages': [{'languageCode': 'ko', 'confidence': 1}]}, 'boundingBox': {'vertices': [{'x': 38, 'y': 367}, {'x': 559, 'y': 372}, {'x': 558, 'y': 439}, {'x': 37, 'y': 434}]}, 'words': [{'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 38, 'y': 367}, {'x': 206, 'y': 369}, {'x': 205, 'y': 432}, {'x': 37, 'y': 430}]}, 'symbols': [{'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 38, 'y': 367}, {'x': 88, 'y': 367}, {'x': 87, 'y': 428}, {'x': 37, 'y': 428}]}, 'text': '행'}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 98, 'y': 368}, {'x': 144, 'y': 368}, {'x': 143, 'y': 431}, {'x': 97, 'y': 431}]}, 'text': '복'}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}], 'detectedBreak': {'type': 'SPACE'}}, 'boundingBox': {'vertices': [{'x': 154, 'y': 368}, {'x': 206, 'y': 368}, {'x': 205, 'y': 427}, {'x': 153, 'y': 427}]}, 'text': '한'}]}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 233, 'y': 371}, {'x': 340, 'y': 372}, {'x': 339, 'y': 429}, {'x': 232, 'y': 428}]}, 'symbols': [{'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 233, 'y': 372}, {'x': 299, 'y': 373}, {'x': 298, 'y': 429}, {'x': 232, 'y': 428}]}, 'text': '하'}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}], 'detectedBreak': {'type': 'SPACE'}}, 'boundingBox': {'vertices': [{'x': 300, 'y': 372}, {'x': 340, 'y': 372}, {'x': 339, 'y': 428}, {'x': 299, 'y': 428}]}, 'text': '루'}]}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 369, 'y': 370}, {'x': 534, 'y': 371}, {'x': 533, 'y': 438}, {'x': 368, 'y': 437}]}, 'symbols': [{'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 369, 'y': 370}, {'x': 422, 'y': 370}, {'x': 421, 'y': 436}, {'x': 368, 'y': 436}]}, 'text': '되'}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 423, 'y': 371}, {'x': 500, 'y': 372}, {'x': 499, 'y': 438}, {'x': 422, 'y': 437}]}, 'text': '세'}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 501, 'y': 371}, {'x': 534, 'y': 371}, {'x': 533, 'y': 437}, {'x': 500, 'y': 437}]}, 'text': '요'}]}, {'property': {'detectedLanguages': [{'languageCode': 'ko'}]}, 'boundingBox': {'vertices': [{'x': 545, 'y': 377}, {'x': 559, 'y': 377}, {'x': 559, 'y': 427}, {'x': 545, 'y': 427}]}, 'symbols': [{'property': {'detectedLanguages': [{'languageCode': 'ko'}], 'detectedBreak': {'type': 'EOL_SURE_SPACE'}}, 'boundingBox': {'vertices': [{'x': 545, 'y': 377}, {'x': 559, 'y': 377}, {'x': 559, 'y': 427}, {'x': 545, 'y': 427}]}, 'text': '!'}]}]}], 'blockType': 'TEXT'}]}], 'text': '행복한 하루 되세요!\\n'}}]}\n",
            "행복한 하루 되세요!\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B6TdLhfNyXzo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def detect_text_uri(uri):\n",
        "    \"\"\"Detects text in the file located in Google Cloud Storage or on the Web.\n",
        "    \"\"\"\n",
        "    from google.cloud import vision\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "    image = vision.types.Image()\n",
        "    image.source.image_uri = uri\n",
        "\n",
        "    response = client.text_detection(image=image)\n",
        "    texts = response.text_annotations\n",
        "    print('Texts:')\n",
        "\n",
        "    for text in texts:\n",
        "        print('\\n\"{}\"'.format(text.description))\n",
        "\n",
        "        vertices = (['({},{})'.format(vertex.x, vertex.y)\n",
        "                    for vertex in text.bounding_poly.vertices])\n",
        "\n",
        "        print('bounds: {}'.format(','.join(vertices)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WpEB3D5f2m0W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "\n",
        "#How to create a key\n",
        "# https://cloud.google.com/docs/authentication/getting-started\n",
        "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/content/My First Project-3bff2f26f8fe.json\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cfbKDayH3H9-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def detect_text_uri(uri):\n",
        "    \"\"\"Detects text in the file located in Google Cloud Storage or on the Web.\n",
        "    \"\"\"\n",
        "    from google.cloud import vision\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "    image = vision.types.Image()\n",
        "    image.source.image_uri = uri\n",
        "\n",
        "    response = client.text_detection(image=image)\n",
        "    texts = response.text_annotations\n",
        "    print('Texts:')\n",
        "\n",
        "    for text in texts:\n",
        "        print('\\n\"{}\"'.format(text.description))\n",
        "\n",
        "        vertices = (['({},{})'.format(vertex.x, vertex.y)\n",
        "                    for vertex in text.bounding_poly.vertices])\n",
        "\n",
        "        print('bounds: {}'.format(','.join(vertices)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pxAvxmT48SW_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "6a6075c3-9483-494b-b42e-08a8cfbbb283"
      },
      "source": [
        "detect_text_uri(\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/hi.jpg\")"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Texts:\n",
            "\n",
            "\"locale: \"ko\"\n",
            "description: \"(\\353\\214\\200\\352\\265\\255\\353\\257\\274\\n\\355\\206\\240\\355\\201\\254\\354\\207\\274,\\n\\355\\225\\234\\353\\213\\271\\355\\225\\230\\354\\213\\234\\354\\232\\224\\n\\340\\260\\270\\340\\261\\215\\340\\260\\245\\340\\260\\276\\340\\260\\260\\n\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 273\n",
            "  }\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 273\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: (대국민\n",
            "토크쇼,\n",
            "한당하시요\n",
            "స్థార\n",
            "\n",
            "Translation: (People talk show, let&#39;s go స్థార\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"(\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 139\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 139\n",
            "    y: 140\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: (\n",
            "Translation: (\n",
            "Detected source language: en\n",
            "\n",
            "\"description: \"\\353\\214\\200\\352\\265\\255\\353\\257\\274\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 159\n",
            "    y: 123\n",
            "  }\n",
            "  vertices {\n",
            "    x: 191\n",
            "    y: 123\n",
            "  }\n",
            "  vertices {\n",
            "    x: 191\n",
            "    y: 141\n",
            "  }\n",
            "  vertices {\n",
            "    x: 159\n",
            "    y: 141\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 대국민\n",
            "Translation: Public\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\355\\206\\240\\355\\201\\254\\354\\207\\274\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 139\n",
            "  }\n",
            "  vertices {\n",
            "    x: 187\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 186\n",
            "    y: 157\n",
            "  }\n",
            "  vertices {\n",
            "    x: 153\n",
            "    y: 156\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 토크쇼\n",
            "Translation: Talk show\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \",\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 189\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 190\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 189\n",
            "    y: 157\n",
            "  }\n",
            "  vertices {\n",
            "    x: 188\n",
            "    y: 157\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: ,\n",
            "Translation: ,\n",
            "Detected source language: en\n",
            "\n",
            "\"description: \"\\355\\225\\234\\353\\213\\271\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 74\n",
            "    y: 139\n",
            "  }\n",
            "  vertices {\n",
            "    x: 207\n",
            "    y: 147\n",
            "  }\n",
            "  vertices {\n",
            "    x: 200\n",
            "    y: 265\n",
            "  }\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 257\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 한당\n",
            "Translation: Per party\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\355\\225\\230\\354\\213\\234\\354\\232\\224\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 209\n",
            "    y: 147\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 155\n",
            "  }\n",
            "  vertices {\n",
            "    x: 339\n",
            "    y: 273\n",
            "  }\n",
            "  vertices {\n",
            "    x: 202\n",
            "    y: 265\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 하시요\n",
            "Translation: Do\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\340\\260\\270\\340\\261\\215\\340\\260\\245\\340\\260\\276\\340\\260\\260\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 160\n",
            "    y: 169\n",
            "  }\n",
            "  vertices {\n",
            "    x: 333\n",
            "    y: 161\n",
            "  }\n",
            "  vertices {\n",
            "    x: 337\n",
            "    y: 245\n",
            "  }\n",
            "  vertices {\n",
            "    x: 164\n",
            "    y: 253\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: స్థార\n",
            "Translation: Stara\n",
            "Detected source language: te\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JPw3ooed4Zhk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from googleapiclient.http import MediaFileUpload\n",
        "media = MediaFileUpload('test.jpg',mimetype='image/jpeg',resumable=True)\n",
        "request = gcs_service."
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LFrv_7aD-u1X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "86c18da3-3aef-45c3-d2a9-6c0971eea593"
      },
      "source": [
        "import six\n",
        "\n",
        "def detect_text_uri(uri):\n",
        "    \"\"\"Detects text in the file located in Google Cloud Storage or on the Web.\n",
        "    \"\"\"\n",
        "    from google.cloud import vision\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "    image = vision.types.Image()\n",
        "    image.source.image_uri = uri\n",
        "\n",
        "    response = client.text_detection(image=image)\n",
        "    texts = response.text_annotations\n",
        "    print('Texts:')\n",
        "\n",
        "    for text in texts:\n",
        "        print('\\n\"{}\"'.format(text))\n",
        "\n",
        "        from google.cloud import translate_v2 as translate\n",
        "        translate_client = translate.Client()\n",
        "\n",
        "        if isinstance(text.description, six.binary_type):\n",
        "            text.description = text.description.decode('utf-8')\n",
        "\n",
        "        # Text can also be a sequence of strings, in which case this method\n",
        "        # will return a sequence of results for each text.\n",
        "        result = translate_client.translate(\n",
        "            text.description, target_language='en')\n",
        "\n",
        "        print(u'Text: {}'.format(result['input']))\n",
        "        print(u'Translation: {}'.format(result['translatedText']))\n",
        "        print(u'Detected source language: {}'.format(\n",
        "            result['detectedSourceLanguage']))\n",
        "\n",
        "detect_text_uri(\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/hi.jpg\")"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Texts:\n",
            "\n",
            "\"locale: \"ko\"\n",
            "description: \"(\\353\\214\\200\\352\\265\\255\\353\\257\\274\\n\\355\\206\\240\\355\\201\\254\\354\\207\\274,\\n\\355\\225\\234\\353\\213\\271\\355\\225\\230\\354\\213\\234\\354\\232\\224\\n\\340\\260\\270\\340\\261\\215\\340\\260\\245\\340\\260\\276\\340\\260\\260\\n\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 273\n",
            "  }\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 273\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: (대국민\n",
            "토크쇼,\n",
            "한당하시요\n",
            "స్థార\n",
            "\n",
            "Translation: (People talk show, let&#39;s go స్థార\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"(\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 139\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 122\n",
            "  }\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 139\n",
            "    y: 140\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: (\n",
            "Translation: (\n",
            "Detected source language: en\n",
            "\n",
            "\"description: \"\\353\\214\\200\\352\\265\\255\\353\\257\\274\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 159\n",
            "    y: 123\n",
            "  }\n",
            "  vertices {\n",
            "    x: 191\n",
            "    y: 123\n",
            "  }\n",
            "  vertices {\n",
            "    x: 191\n",
            "    y: 141\n",
            "  }\n",
            "  vertices {\n",
            "    x: 159\n",
            "    y: 141\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 대국민\n",
            "Translation: Public\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\355\\206\\240\\355\\201\\254\\354\\207\\274\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 154\n",
            "    y: 139\n",
            "  }\n",
            "  vertices {\n",
            "    x: 187\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 186\n",
            "    y: 157\n",
            "  }\n",
            "  vertices {\n",
            "    x: 153\n",
            "    y: 156\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 토크쇼\n",
            "Translation: Talk show\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \",\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 189\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 190\n",
            "    y: 140\n",
            "  }\n",
            "  vertices {\n",
            "    x: 189\n",
            "    y: 157\n",
            "  }\n",
            "  vertices {\n",
            "    x: 188\n",
            "    y: 157\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: ,\n",
            "Translation: ,\n",
            "Detected source language: en\n",
            "\n",
            "\"description: \"\\355\\225\\234\\353\\213\\271\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 74\n",
            "    y: 139\n",
            "  }\n",
            "  vertices {\n",
            "    x: 207\n",
            "    y: 147\n",
            "  }\n",
            "  vertices {\n",
            "    x: 200\n",
            "    y: 265\n",
            "  }\n",
            "  vertices {\n",
            "    x: 67\n",
            "    y: 257\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 한당\n",
            "Translation: Per party\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\355\\225\\230\\354\\213\\234\\354\\232\\224\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 209\n",
            "    y: 147\n",
            "  }\n",
            "  vertices {\n",
            "    x: 346\n",
            "    y: 155\n",
            "  }\n",
            "  vertices {\n",
            "    x: 339\n",
            "    y: 273\n",
            "  }\n",
            "  vertices {\n",
            "    x: 202\n",
            "    y: 265\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: 하시요\n",
            "Translation: Do\n",
            "Detected source language: ko\n",
            "\n",
            "\"description: \"\\340\\260\\270\\340\\261\\215\\340\\260\\245\\340\\260\\276\\340\\260\\260\"\n",
            "bounding_poly {\n",
            "  vertices {\n",
            "    x: 160\n",
            "    y: 169\n",
            "  }\n",
            "  vertices {\n",
            "    x: 333\n",
            "    y: 161\n",
            "  }\n",
            "  vertices {\n",
            "    x: 337\n",
            "    y: 245\n",
            "  }\n",
            "  vertices {\n",
            "    x: 164\n",
            "    y: 253\n",
            "  }\n",
            "}\n",
            "\"\n",
            "Text: స్థార\n",
            "Translation: Stara\n",
            "Detected source language: te\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qOBJvxcX-7kQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 154
        },
        "outputId": "0d8841fb-1f68-444f-c191-f2df87f35ab7"
      },
      "source": [
        "def localize_objects(path):\n",
        "    \"\"\"Localize objects in the local image.\n",
        "\n",
        "    Args:\n",
        "    path: The path to the local file.\n",
        "    \"\"\n",
        "    from google.cloud import vision\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "\n",
        "    with open(path, 'rb') as image_file:\n",
        "        content = image_file.read()\n",
        "    image = vision.types.Image(content=content)\n",
        "\n",
        "    objects = client.object_localization(\n",
        "        image=image).localized_object_annotations\n",
        "\n",
        "    print('Number of objects found: {}'.format(len(objects)))\n",
        "    for object_ in objects:\n",
        "        print('\\n{} (confidence: {})'.format(object_.name, object_.score))\n",
        "        print('Normalized bounding polygon vertices: ')\n",
        "        for vertex in object_.bounding_poly.normalized_vertices:\n",
        "            print(' - ({}, {})'.format(vertex.x, vertex.y))"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-39-240b8dc052fe>\"\u001b[0;36m, line \u001b[0;32m22\u001b[0m\n\u001b[0;31m    print(' - ({}, {})'.format(vertex.x, vertex.y))\u001b[0m\n\u001b[0m                                                   \n^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOF while scanning triple-quoted string literal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kq55thr8S5PP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def localize_objects_uri(uri):\n",
        "    \"\"\"Localize objects in the image on Google Cloud Storage\n",
        "\n",
        "    Args:\n",
        "    uri: The path to the file in Google Cloud Storage (gs://...)\n",
        "    \"\"\"\n",
        "    from google.cloud import vision\n",
        "    client = vision.ImageAnnotatorClient()\n",
        "\n",
        "    image = vision.types.Image()\n",
        "    image.source.image_uri = uri\n",
        "\n",
        "    objects = client.object_localization(\n",
        "        image=image).localized_object_annotations\n",
        "\n",
        "    print('Number of objects found: {}'.format(len(objects)))\n",
        "    for object_ in objects:\n",
        "        print('\\n{} (confidence: {})'.format(object_.name, object_.score))\n",
        "        print('Normalized bounding polygon vertices: ')\n",
        "        for vertex in object_.bounding_poly.normalized_vertices:\n",
        "            print(' - ({}, {})'.format(vertex.x, vertex.y))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uE741TqVT_Ph",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "outputId": "72f18623-4d61-4b8f-c901-46ae0874bd45"
      },
      "source": [
        "import cv2\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "#Create a video capture object to read videos\n",
        "image = cv2.imread(video_path)\n",
        "w = image.shape[0]\n",
        "h = image.shape[1]\n",
        "\n",
        "p1 = (vtx.x * w, vtx.y * h)\n",
        "p2 = (580, 400)\n",
        "cv2.rectangle(image, p1, p2, (255, 0, 0), 2, 1)\n",
        "cv2_imshow(image)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-38-999bc266bb72>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#Create a video capture object to read videos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvideo_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'video_path' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aCv55LRMV7b_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "outputId": "8bf749ec-d38a-4ea7-ec32-7b97493648e8"
      },
      "source": [
        "localize_objects_uri (\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/cat.jpg\")"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of objects found: 1\n",
            "\n",
            "Cat (confidence: 0.9828556776046753)\n",
            "Normalized bounding polygon vertices: \n",
            " - (0.07937648147344589, 0.08170490711927414)\n",
            " - (0.8934486508369446, 0.08170490711927414)\n",
            " - (0.8934486508369446, 0.9049327373504639)\n",
            " - (0.07937648147344589, 0.9049327373504639)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZKfkNusyVpPV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "outputId": "9eff4ec8-ad7c-4b65-891a-d87ee6ddcce9"
      },
      "source": [
        "localize_objects_uri (\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/bicycle.jpg\")"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of objects found: 4\n",
            "\n",
            "Bicycle wheel (confidence: 0.8995324373245239)\n",
            "Normalized bounding polygon vertices: \n",
            " - (0.31734737753868103, 0.7904391884803772)\n",
            " - (0.4459078311920166, 0.7904391884803772)\n",
            " - (0.4459078311920166, 0.9731102585792542)\n",
            " - (0.31734737753868103, 0.9731102585792542)\n",
            "\n",
            "Bicycle wheel (confidence: 0.8842331767082214)\n",
            "Normalized bounding polygon vertices: \n",
            " - (0.5012580752372742, 0.7649986743927002)\n",
            " - (0.628057062625885, 0.7649986743927002)\n",
            " - (0.628057062625885, 0.9458420276641846)\n",
            " - (0.5012580752372742, 0.9458420276641846)\n",
            "\n",
            "Bicycle (confidence: 0.7549591064453125)\n",
            "Normalized bounding polygon vertices: \n",
            " - (0.3197494149208069, 0.6697990894317627)\n",
            " - (0.6358612775802612, 0.6697990894317627)\n",
            " - (0.6358612775802612, 0.9711346626281738)\n",
            " - (0.3197494149208069, 0.9711346626281738)\n",
            "\n",
            "Picture frame (confidence: 0.6431987285614014)\n",
            "Normalized bounding polygon vertices: \n",
            " - (0.7880365252494812, 0.15778371691703796)\n",
            " - (0.9710407853126526, 0.15778371691703796)\n",
            " - (0.9710407853126526, 0.31204989552497864)\n",
            " - (0.7880365252494812, 0.31204989552497864)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qdfclJq3Yi7J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "outputId": "1523669a-16b9-4949-f93e-449402e8f381"
      },
      "source": [
        "import cv2\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "#Create a video capture object to read videos\n",
        "image = cv2.imread(\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/bicycle.jpg\")\n",
        "w = image.shape[0]\n",
        "h = image.shape[1]\n",
        "\n",
        "p1 = (vtx.x * w, vtx.y * h)\n",
        "p2 = (580, 400)\n",
        "cv2.rectangle(image, p1, p2, (255, 0, 0), 2, 1)\n",
        "cv2_imshow(image)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-49-20f89f5a4409>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#Create a video capture object to read videos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/bicycle.jpg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "naojVKN4eF8L",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "outputId": "2b6f7cc9-8dc1-41a3-8520-a28abb3dcef4"
      },
      "source": [
        "\"\"\" Detects labels given a GCS path. \"\"\"\n",
        "video_client = videointelligence.VideoIntelligenceServiceClient()\n",
        "features = [videointelligence.enums.Feature.LABEL_DETECTION]\n",
        "\n",
        "mode = videointelligence.enums.LabelDetectionMode.SHOT_AND_FRAME_MODE\n",
        "config = videointelligence.types.LabelDetectionConfig(\n",
        "    label_detection_mode=mode)\n",
        "context = videointelligence.types.VideoContext(\n",
        "    label_detection_config=config)\n",
        "\n",
        "operation = video_client.annotate_video(\n",
        "    path, features=features, video_context=context)\n",
        "print('\\nProcessing video for label annotations:')\n",
        "\n",
        "result = operation.result(timeout=180)\n",
        "print('\\nFinished processing.')\n",
        "\n",
        "# Process video/segment level label annotations\n",
        "segment_labels = result.annotation_results[0].segment_label_annotations\n",
        "for i, segment_label in enumerate(segment_labels):\n",
        "    print('Video label description: {}'.format(\n",
        "        segment_label.entity.description))\n",
        "    for category_entity in segment_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    for i, segment in enumerate(segment_label.segments):\n",
        "        start_time = (segment.segment.start_time_offset.seconds +\n",
        "                      segment.segment.start_time_offset.nanos / 1e9)\n",
        "        end_time = (segment.segment.end_time_offset.seconds +\n",
        "                    segment.segment.end_time_offset.nanos / 1e9)\n",
        "        positions = '{}s to {}s'.format(start_time, end_time)\n",
        "        confidence = segment.confidence\n",
        "        print('\\tSegment {}: {}'.format(i, positions))\n",
        "        print('\\tConfidence: {}'.format(confidence))\n",
        "    print('\\n')\n",
        "\n",
        "# Process shot level label annotations\n",
        "shot_labels = result.annotation_results[0].shot_label_annotations\n",
        "for i, shot_label in enumerate(shot_labels):\n",
        "    print('Shot label description: {}'.format(\n",
        "        shot_label.entity.description))\n",
        "    for category_entity in shot_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    for i, shot in enumerate(shot_label.segments):\n",
        "        start_time = (shot.segment.start_time_offset.seconds +\n",
        "                      shot.segment.start_time_offset.nanos / 1e9)\n",
        "        end_time = (shot.segment.end_time_offset.seconds +\n",
        "                    shot.segment.end_time_offset.nanos / 1e9)\n",
        "        positions = '{}s to {}s'.format(start_time, end_time)\n",
        "        confidence = shot.confidence\n",
        "        print('\\tSegment {}: {}'.format(i, positions))\n",
        "        print('\\tConfidence: {}'.format(confidence))\n",
        "    print('\\n')\n",
        "\n",
        "# Process frame level label annotations\n",
        "frame_labels = result.annotation_results[0].frame_label_annotations\n",
        "for i, frame_label in enumerate(frame_labels):\n",
        "    print('Frame label description: {}'.format(\n",
        "        frame_label.entity.description))\n",
        "    for category_entity in frame_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    # Each frame_label_annotation has many frames,\n",
        "    # here we print information only about the first frame.\n",
        "    frame = frame_label.frames[0]\n",
        "    time_offset = (frame.time_offset.seconds +\n",
        "                   frame.time_offset.nanos / 1e9)\n",
        "    print('\\tFirst frame time offset: {}s'.format(time_offset))\n",
        "    print('\\tFirst frame confidence: {}'.format(frame.confidence))\n",
        "    print('\\n')"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-55da38f2dc63>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;34m\"\"\" Detects labels given a GCS path. \"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mvideo_client\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvideointelligence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVideoIntelligenceServiceClient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvideointelligence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menums\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFeature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLABEL_DETECTION\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvideointelligence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menums\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLabelDetectionMode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSHOT_AND_FRAME_MODE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'videointelligence' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DA2ymQ0EeNrI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 703
        },
        "outputId": "8a080f16-7f73-4e62-cbbb-4ae63b68db04"
      },
      "source": [
        "!pip install google-cloud-vision\n",
        "!pip install google-cloud\n",
        "!pip install google-cloud-videointelligence"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: google-cloud-vision in /usr/local/lib/python3.6/dist-packages (0.40.0)\n",
            "Requirement already satisfied: google-api-core[grpc]<2.0.0dev,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-vision) (1.14.3)\n",
            "Requirement already satisfied: setuptools>=34.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (41.4.0)\n",
            "Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2.21.0)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2018.9)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.12.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.6.0)\n",
            "Requirement already satisfied: protobuf>=3.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.10.0)\n",
            "Requirement already satisfied: google-auth<2.0dev,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.4.2)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.8.2; extra == \"grpc\" in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.15.0)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2019.9.11)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (1.24.3)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (2.8)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (0.2.7)\n",
            "Requirement already satisfied: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (3.1.1)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (4.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-vision) (0.4.7)\n",
            "Requirement already satisfied: google-cloud in /usr/local/lib/python3.6/dist-packages (0.34.0)\n",
            "Requirement already satisfied: google-cloud-videointelligence in /usr/local/lib/python3.6/dist-packages (1.12.0)\n",
            "Requirement already satisfied: google-api-core[grpc]<2.0.0dev,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from google-cloud-videointelligence) (1.14.3)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2018.9)\n",
            "Requirement already satisfied: setuptools>=34.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (41.4.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.6.0)\n",
            "Requirement already satisfied: google-auth<2.0dev,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.4.2)\n",
            "Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2.21.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.12.0)\n",
            "Requirement already satisfied: protobuf>=3.4.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.10.0)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.8.2; extra == \"grpc\" in /usr/local/lib/python3.6/dist-packages (from google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.15.0)\n",
            "Requirement already satisfied: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.1.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (0.2.7)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (4.0)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (3.0.4)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2019.9.11)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (2.8)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2.0dev,>=0.4.0->google-api-core[grpc]<2.0.0dev,>=1.14.0->google-cloud-videointelligence) (0.4.7)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ml2e8ca1fVwS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-lIX8gOGfbA4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.cloud import videointelligence\n",
        "\n",
        "def analyze_labels(path):\n",
        "  \"\"\" Detects labels given a GCS path. \"\"\"\n",
        "  video_client = videointelligence.VideoIntelligenceServiceClient()\n",
        "  features = [videointelligence.enums.Feature.LABEL_DETECTION]\n",
        "  operation = video_client.annotate_video(input_uri=path, features=features)\n",
        "  print('\\nProcessing video for label annotations:')\n",
        "  result = operation.result(timeout=90)\n",
        "  print('\\nFinished processing.')\n",
        "\n",
        "  segment_labels = result.annotation_results[0].segment_label_annotations\n",
        "  for i, segment_label in enumerate(segment_labels):\n",
        "      print('Video label description: {}'.format(\n",
        "          segment_label.entity.description))\n",
        "      for category_entity in segment_label.category_entities:\n",
        "          print('\\tLabel category description: {}'.format(\n",
        "              category_entity.description))\n",
        "\n",
        "      for i, segment in enumerate(segment_label.segments):\n",
        "          start_time = (segment.segment.start_time_offset.seconds +\n",
        "                        segment.segment.start_time_offset.nanos / 1e9)\n",
        "          end_time = (segment.segment.end_time_offset.seconds +\n",
        "                      segment.segment.end_time_offset.nanos / 1e9)\n",
        "          positions = '{}s to {}s'.format(start_time, end_time)\n",
        "          confidence = segment.confidence\n",
        "          print('\\tSegment {}: {}'.format(i, positions))\n",
        "          print('\\tConfidence: {}'.format(confidence))\n",
        "      print('\\n')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suO7dteAdExc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "outputId": "9b780490-cbd6-43ef-9fab-fbec1f2a2c3c"
      },
      "source": [
        "\"\"\"Detect labels given a file path.\"\"\"\n",
        "video_client = videointelligence.VideoIntelligenceServiceClient()\n",
        "features = [videointelligence.enums.Feature.LABEL_DETECTION]\n",
        "\n",
        "with io.open(\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4\", 'rb') as movie:\n",
        "    input_content = movie.read()\n",
        "\n",
        "operation = video_client.annotate_video(\n",
        "    features=features, input_content=input_content)\n",
        "print('\\nProcessing video for label annotations:')\n",
        "\n",
        "result = operation.result(timeout=90)\n",
        "print('\\nFinished processing.')\n",
        "\n",
        "# Process video/segment level label annotations\n",
        "segment_labels = result.annotation_results[0].segment_label_annotations\n",
        "for i, segment_label in enumerate(segment_labels):\n",
        "    print('Video label description: {}'.format(\n",
        "        segment_label.entity.description))\n",
        "    for category_entity in segment_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    for i, segment in enumerate(segment_label.segments):\n",
        "        start_time = (segment.segment.start_time_offset.seconds +\n",
        "                      segment.segment.start_time_offset.nanos / 1e9)\n",
        "        end_time = (segment.segment.end_time_offset.seconds +\n",
        "                    segment.segment.end_time_offset.nanos / 1e9)\n",
        "        positions = '{}s to {}s'.format(start_time, end_time)\n",
        "        confidence = segment.confidence\n",
        "        print('\\tSegment {}: {}'.format(i, positions))\n",
        "        print('\\tConfidence: {}'.format(confidence))\n",
        "    print('\\n')\n",
        "\n",
        "# Process shot level label annotations\n",
        "shot_labels = result.annotation_results[0].shot_label_annotations\n",
        "for i, shot_label in enumerate(shot_labels):\n",
        "    print('Shot label description: {}'.format(\n",
        "        shot_label.entity.description))\n",
        "    for category_entity in shot_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    for i, shot in enumerate(shot_label.segments):\n",
        "        start_time = (shot.segment.start_time_offset.seconds +\n",
        "                      shot.segment.start_time_offset.nanos / 1e9)\n",
        "        end_time = (shot.segment.end_time_offset.seconds +\n",
        "                    shot.segment.end_time_offset.nanos / 1e9)\n",
        "        positions = '{}s to {}s'.format(start_time, end_time)\n",
        "        confidence = shot.confidence\n",
        "        print('\\tSegment {}: {}'.format(i, positions))\n",
        "        print('\\tConfidence: {}'.format(confidence))\n",
        "    print('\\n')\n",
        "\n",
        "# Process frame level label annotations\n",
        "frame_labels = result.annotation_results[0].frame_label_annotations\n",
        "for i, frame_label in enumerate(frame_labels):\n",
        "    print('Frame label description: {}'.format(\n",
        "        frame_label.entity.description))\n",
        "    for category_entity in frame_label.category_entities:\n",
        "        print('\\tLabel category description: {}'.format(\n",
        "            category_entity.description))\n",
        "\n",
        "    # Each frame_label_annotation has many frames,\n",
        "    # here we print information only about the first frame.\n",
        "    frame = frame_label.frames[0]\n",
        "    time_offset = frame.time_offset.seconds + frame.time_offset.nanos / 1e9\n",
        "    print('\\tFirst frame time offset: {}s'.format(time_offset))\n",
        "    print('\\tFirst frame confidence: {}'.format(frame.confidence))\n",
        "    print('\\n')"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-58-11a44b2396f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvideointelligence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menums\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFeature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLABEL_DETECTION\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmovie\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0minput_content\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmovie\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'io' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBG-h56GhHGG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "2ee88840-d09b-436d-edf2-db9c559167c0"
      },
      "source": [
        "def object_tracking(gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4):\n",
        "  video_client = videointelligence.VideoIntelligenceServiceClient()\n",
        "  features = [videointelligence.enums.Feature.OBJECT_TRACKING]\n",
        "  operation = video_client.annotate_video(\n",
        "      input_uri=path, features=features)\n",
        "  print('\\nProcessing video for object tracking.')\n",
        "\n",
        "  result = operation.result(timeout=300)\n",
        "  print('\\nFinished processing.\\n')\n",
        "\n",
        "  # The first result is retrieved because a single video was processed.\n",
        "  object_annotations = result.annotation_results[0].object_annotations\n",
        "\n",
        "  # Get only the first annotation for demo purposes.\n",
        "  object_annotation = object_annotations[0]\n",
        "  print('Entity description: {}'.format(\n",
        "      object_annotation.entity.description))\n",
        "  if object_annotation.entity.entity_id:\n",
        "      print('Entity id: {}'.format(object_annotation.entity.entity_id))\n",
        "\n",
        "  print('Segment: {}s to {}s'.format(\n",
        "      object_annotation.segment.start_time_offset.seconds +\n",
        "      object_annotation.segment.start_time_offset.nanos / 1e9,\n",
        "      object_annotation.segment.end_time_offset.seconds +\n",
        "      object_annotation.segment.end_time_offset.nanos / 1e9))\n",
        "\n",
        "  print('Confidence: {}'.format(object_annotation.confidence))\n",
        "\n",
        "  # Here we print only the bounding box of the first frame in this segment\n",
        "  frame = object_annotation.frames[0]\n",
        "  box = frame.normalized_bounding_box\n",
        "  print('Time offset of the first frame: {}s'.format(\n",
        "      frame.time_offset.seconds + frame.time_offset.nanos / 1e9))\n",
        "  print('Bounding box position:')\n",
        "  print('\\tleft  : {}'.format(box.left))\n",
        "  print('\\ttop   : {}'.format(box.top))\n",
        "  print('\\tright : {}'.format(box.right))\n",
        "  print('\\tbottom: {}'.format(box.bottom))\n",
        "\n",
        "object_tracking('gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4')"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-62-ca19a49ef7ae>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    def object_tracking(gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4):\u001b[0m\n\u001b[0m                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nm_a7ZjXlbBG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "f0c2fc2d-c354-45fd-c568-bc94787b7dc7"
      },
      "source": [
        "object_tracking (\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4\")"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "error",
          "ename": "PermissionDenied",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31m_Rendezvous\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/grpc_helpers.py\u001b[0m in \u001b[0;36merror_remapped_callable\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcallable_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mgrpc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRpcError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/grpc/_channel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, request, timeout, metadata, credentials)\u001b[0m\n\u001b[1;32m    531\u001b[0m         \u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_blocking\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcredentials\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 532\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_end_unary_response_blocking\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/grpc/_channel.py\u001b[0m in \u001b[0;36m_end_unary_response_blocking\u001b[0;34m(state, call, with_call, deadline)\u001b[0m\n\u001b[1;32m    465\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 466\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0m_Rendezvous\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdeadline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    467\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31m_Rendezvous\u001b[0m: <_Rendezvous of RPC that terminated with:\n\tstatus = StatusCode.PERMISSION_DENIED\n\tdetails = \"Cloud Video Intelligence API has not been used in project 2455017332 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/videointelligence.googleapis.com/overview?project=2455017332 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.\"\n\tdebug_error_string = \"{\"created\":\"@1573796688.756723033\",\"description\":\"Error received from peer\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1099,\"grpc_message\":\"Cloud Video Intelligence API has not been used in project 2455017332 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/videointelligence.googleapis.com/overview?project=2455017332 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.\",\"grpc_status\":7}\"\n>",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mPermissionDenied\u001b[0m                          Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-63-a9894647b2e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mobject_tracking\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"gs://colab-sample-bucket-8fd4e996-074b-11ea-83db-0242ac1c0002/funny.mp4\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-60-6847660e0e8a>\u001b[0m in \u001b[0;36mobject_tracking\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvideointelligence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menums\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFeature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOBJECT_TRACKING\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   operation = video_client.annotate_video(\n\u001b[0;32m----> 5\u001b[0;31m       input_uri=path, features=features)\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nProcessing video for object tracking.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/cloud/videointelligence_v1/gapic/video_intelligence_service_client.py\u001b[0m in \u001b[0;36mannotate_video\u001b[0;34m(self, features, input_uri, input_content, video_context, output_uri, location_id, retry, timeout, metadata)\u001b[0m\n\u001b[1;32m    297\u001b[0m         )\n\u001b[1;32m    298\u001b[0m         operation = self._inner_api_calls[\"annotate_video\"](\n\u001b[0;32m--> 299\u001b[0;31m             \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretry\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mretry\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    300\u001b[0m         )\n\u001b[1;32m    301\u001b[0m         return google.api_core.operation.from_gapic(\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/gapic_v1/method.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    141\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/retry.py\u001b[0m in \u001b[0;36mretry_wrapped_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    275\u001b[0m                 \u001b[0msleep_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_deadline\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m                 \u001b[0mon_error\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mon_error\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m             )\n\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/retry.py\u001b[0m in \u001b[0;36mretry_target\u001b[0;34m(target, predicate, sleep_generator, deadline, on_error)\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msleep\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msleep_generator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m         \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/timeout.py\u001b[0m in \u001b[0;36mfunc_with_timeout\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    212\u001b[0m             \u001b[0;34m\"\"\"Wrapped function that adds timeout.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timeout\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc_with_timeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/api_core/grpc_helpers.py\u001b[0m in \u001b[0;36merror_remapped_callable\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     57\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mcallable_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mgrpc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRpcError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m             \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexceptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_grpc_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0merror_remapped_callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/six.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(value, from_value)\u001b[0m\n",
            "\u001b[0;31mPermissionDenied\u001b[0m: 403 Cloud Video Intelligence API has not been used in project 2455017332 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/videointelligence.googleapis.com/overview?project=2455017332 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0FvefSpwlpDP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "outputId": "6588cfc0-6d08-4061-bee2-7262978aa88e"
      },
      "source": [
        "cap = cv2.VideoCapture('gdrive/My Drive/computer vision course/Colab/Test images/sta.mp4')\n",
        "ret, frame = cap.read()\n",
        "\n",
        "fourcc = cv2.VideoWriter_fourcc(*'MP4V')\n",
        "size = frame.shape[1], frame.shape[0]\n",
        "cap_output = cv2.VideoWriter(output_video_path, fourcc, 30, size)\n",
        "\n",
        "cap_output.write(frame)\n",
        "count = 0\n",
        "while(1):\n",
        "  ret, current_frame = cap.read()\n",
        "  if ret == False:\n",
        "    break\n",
        "                          \n",
        "  (success, box) = tracker.update(current_frame)\n",
        "\n",
        "  # draw the tracks\n",
        "\n",
        "  p1 = (int(box[0]), int(box[1]))\n",
        "  p2 = (int(box[0] + box[2]), int(box[1] + box[3]))\n",
        "  cv2.rectangle(current_frame, p1, p2, (255, 0, 0), 2, 1)  \n",
        "  cap_output.write(current_frame)\n",
        "  count += 1\n",
        "  print (count)\n",
        "  if count > 50:\n",
        "    break\n",
        "\n",
        "cap_output.release()\n",
        "cap.release()"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-1b1da298d25e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfourcc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVideoWriter_fourcc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m'MP4V'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mcap_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVideoWriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_video_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfourcc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fTQNnB7smBGO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}